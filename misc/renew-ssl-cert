#!/bin/sh
# renew-ssl-cert - Auto Renewal of Let's Encrypt SSL Certificate.

set -o errexit          # Exit on most errors (see the manual)
set -o nounset          # Disallow expansion of unset variables
#set -o xtrace          # Trace the execution of the script (debug)

# shellcheck disable=SC2154
trap 'ret=$?; test $ret -ne 0 && printf "failed\n\n" >&2; exit $ret' EXIT

FQDN="$(hostname).$(nvram get wan_domain)"
MAX_RETRIES=${MAX_RETRIES:-3}
RETRY_INTERVAL=5

lock_or_abort() {
    scriptname="$(basename "$0")";
    pidfile="/var/run/${scriptname}"
    exec 9>"$pidfile"
    flock -n 9 || {
        err "failed to acquire filelock"
        exit 1
    }
    pid=$$
    echo $pid 1>&9
}

silence() {
    "$@" 2> /dev/null > /dev/null;
}

pgrep() {
    # shellcheck disable=SC2009
    ps w | grep -v grep | grep "$1" > /dev/null
}

pkill() {
    # shellcheck disable=SC2009
    pid=$(ps w | grep -v grep | grep "$1" | awk '{print $1}')
    kill "$pid"
}

fwgrep() {
    iptables -L "$1" --line-numbers | grep -E "$2"
}

start_nginx() {
    log "starting nginx"
    silence /opt/etc/init.d/S80nginx start
}

stop_nginx() {
    log "stopping nginx (sigterm nginx)"
    silence /opt/etc/init.d/S80nginx stop || true
    sleep 5
    if pgrep "nginx"; then
        log "stopping nginx (sigkill nginx)"
        pkill "nginx"
    fi
}

allow_inbound_http() {
    log "allow incoming http/https traffic from anywhere"
    iptables -t filter -A INPUT -p tcp --dport 80 -j ACCEPT
    iptables -t filter -A INPUT -p tcp --dport 443 -j ACCEPT
}

deny_inbound_http() {
    log "deny incoming http/https traffic from anywhere"
    rul=$(fwgrep INPUT "tcp dpt:(www|https)" | awk '{print $1}' | sort -rg)
    for r in $rul; do
        log "deleted iptable rule number $r"
        iptables -D INPUT "$r"
    done
}

is_reachable() {
    count=1
    url=https://5hbzfbrqje.execute-api.us-east-1.amazonaws.com/prod/isitdown/$1
    while [ $((count)) -le $((MAX_RETRIES)) ]; do
        case "$(curl --silent "$url" | jq -r '.isitdown')" in
            false)
                log "$1 is externally accessable"
                return 0
            ;;
            
            true)
                err "$1 is not externally accessable"
                sleep "$RETRY_INTERVAL"
                count=$((count+1));
            ;;
        esac
    done
    return 1
}

log() {
    timestamp=$(date +"%b %d %H:%M:%S")
    script=$(basename "$0")
    message="$1"; shift
    # shellcheck disable=SC2059
    printf "$timestamp ${script}[$$]: $message\\n" "$@"
    logger -p cron.debug -t "$script" "$message"
}

err() {
    timestamp=$(date +"%b %d %H:%M:%S")
    script=$(basename "$0")
    message="$1"; shift
    # shellcheck disable=SC2059
    printf "$timestamp ${script}[$$]: $message\\n" "$@"
    logger -p cron.err -t "$script" "$message"
}

revert_to_original_state() {
    log "restoring original service and firewall states"
    stop_nginx
    # note: we do "or true" to suppress error that no active rules exist.
    deny_inbound_http || true
}

get_new_ssl_cert() {
    log "getting new ssl certificate"
    cd /opt/etc/nginx || exit 1
    # note: add --force when debugging
    bash ./dehydrated --domain "$FQDN" --cron
    log "installing new cert"
    cp "/opt/etc/nginx/certs/$FQDN/cert.pem" /etc/cert.pem
    cp "/opt/etc/nginx/certs/$FQDN/privkey.pem" /etc/key.pem
    sed -i "/END CERTIFICATE/q" /etc/cert.pem
    
    log "writing new cert to nvram"
    tar -C / -cf /tmp/cert.tar etc/cert.pem etc/key.pem
    gzip -f /tmp/cert.tar
    nvram set https_crt_file="$(openssl enc -base64 < /tmp/cert.tar.gz | tr -d '\n')"
    nvram commit
    
    log "restarting httpd"
    service httpd restart
}

main() {
    lock_or_abort
    log "starting ssl certificate renewal"
    revert_to_original_state
    start_nginx
    allow_inbound_http
    if is_reachable "$FQDN"; then
        get_new_ssl_cert
    else
        err "unable to renew ssl certificate"
        revert_to_original_state
    fi
}

main

trap revert_to_original_state EXIT
