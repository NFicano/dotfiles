#!/bin/sh
set -o errexit          # Exit on most errors (see the manual)
set -o errtrace         # Make sure any error trap is inherited
set -o nounset          # Disallow expansion of unset variables
set -o pipefail         # Use last non-zero exit code in a pipeline
#set -o xtrace          # Trace the execution of the script (debug)
export PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'

# shellcheck disable=SC2154
trap 'ret=$?; test $ret -ne 0 && printf "failed\n\n" >&2; exit $ret' EXIT

BREW_PREFIX="/usr/local"
BREW_INSTALLER="https://raw.githubusercontent.com/Homebrew/install/master/install"

run_setup() {
  SECONDS=0
  request_root_privileges
  setup_xcode
  setup_brew
  setup_duti
  setup_default_file_associations
  install_formulaes_from_brewfile

  # shellcheck disable=SC2039
  echo "âœ¨  Done in $((SECONDS))s."
  exit 0
}

log() {
  message="$1"
  shift
  # shellcheck disable=SC2059
  printf "$message\n" "$@"
}

get_dotfiles_path() {
  fp="$(readlink -f ${0})"
  dir=$(dirname $fp)
  cd $dir || exit 1
  echo "$(git rev-parse --show-toplevel)"
}

get_brewfile_path() {
  echo "$(get_dotfiles_path)/Brewfile"
}

is_duti_installed() {
  if command -v duti > /dev/null; then
    return 0
  else
    return 1
  fi
}

install_duti() {
  brew install duti
}

setup_duti() {
  if ! is_duti_installed; then
    log "Installing Duti ..."
    install_duti
  else
    log "Duti is already installed. Skipping ..."
  fi
}

install_formulaes_from_brewfile() {
  brew update --force
  brew bundle --file="$(get_brewfile_path)"
}

is_xcode_command_line_tools_installed() {
  if xcode-select -p > /dev/null; then
    return 0
  else
    return 1
  fi
}

install_xcode_command_line_tools() {
  xcode-select --install > /dev/null
  until xcode-select -p > /dev/null; do
    sleep 5
  done
}

is_xcode_eula_accepted() {
  if sudo xcodebuild -license status; then
    return 0
  else
    return 1
  fi
}

accept_xcode_eula() {
  sudo xcodebuild -license accept
}

setup_xcode() {
  if ! is_xcode_command_line_tools_installed; then
    log "Installing Xcode Command Line Tools ..."
    install_xcode_command_line_tools
  else
    log "XCode is already installed. Skipping ..."
  fi

  if ! is_xcode_eula_accepted; then
    log "Accepting EULA ..."
    accept_xcode_eula
  else
    log "XCode EULA Already Accepted. Skipping ..."
  fi
}

is_brew_installed() {
  if command -v brew > /dev/null; then
    return 0
  else
    return 1
  fi
}

install_brew() {
  curl -fsS $BREW_INSTALLER | ruby
  export PATH="/usr/local/bin:$PATH"
}

setup_brew() {
  if [ -d "$BREW_PREFIX" ]; then
    if ! [ -r "$BREW_PREFIX" ]; then
      sudo chown -R "$LOGNAME:admin" "$BREW_PREFIX"
    fi
  else
    sudo mkdir "$BREW_PREFIX"
    sudo chflags norestricted "$BREW_PREFIX"
    sudo chown -R "$LOGNAME:admin" "$BREW_PREFIX"
  fi
  if ! is_brew_installed; then
    log "Installing Homebrew ..."
    install_brew
  else
    log "Homebrew Already Installed. Skipping ..."
  fi
}

request_root_privileges() {
  log "Requesting root privileges ..."
  sudo -v
}

setup_default_file_associations() {
  log "Setting preferred default file associations ..."
  duti -s com.microsoft.Excel .csv all

  duti -s com.microsoft.VSCode .c all
  duti -s com.microsoft.VSCode .cpp all
  duti -s com.microsoft.VSCode .cs all
  duti -s com.microsoft.VSCode .css all
  duti -s com.microsoft.VSCode .go all
  duti -s com.microsoft.VSCode .java all
  duti -s com.microsoft.VSCode .js all
  duti -s com.microsoft.VSCode .sass all
  duti -s com.microsoft.VSCode .scss all
  duti -s com.microsoft.VSCode .less all
  duti -s com.microsoft.VSCode .vue all
  duti -s com.microsoft.VSCode .cfg all
  duti -s com.microsoft.VSCode .json all
  duti -s com.microsoft.VSCode .jsx all
  duti -s com.microsoft.VSCode .lua all
  duti -s com.microsoft.VSCode .md all
  duti -s com.microsoft.VSCode .php all
  duti -s com.microsoft.VSCode .pl all
  duti -s com.microsoft.VSCode .py all
  duti -s com.microsoft.VSCode .rb all
  duti -s com.microsoft.VSCode .rs all
  duti -s com.microsoft.VSCode .sh all
  duti -s com.microsoft.VSCode .swift all
  duti -s com.microsoft.VSCode .txt all
  duti -s com.microsoft.VSCode .conf all
  duti -s com.microsoft.VSCode .yaml all
  duti -s com.microsoft.VSCode .yml all
  duti -s com.microsoft.VSCode .toml all


  duti -s com.microsoft.VSCode public.json all
  duti -s com.microsoft.VSCode public.plain-text all
  duti -s com.microsoft.VSCode public.python-script all
  duti -s com.microsoft.VSCode public.shell-script all
  duti -s com.microsoft.VSCode public.source-code all
  duti -s com.microsoft.VSCode public.text all
  duti -s com.microsoft.VSCode public.unix-executable all
  duti -s com.apple.QuickTimePlayerX .m4a all
  duti -s com.apple.QuickTimePlayerX .mp3 all
}

run_setup
