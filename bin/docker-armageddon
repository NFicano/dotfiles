#!/bin/bash
#/ Brutally remove everything Docker related
#/
#/ USAGE:
#/    docker-armageddon [--help]
#/

set -o errexit          # Exit on most errors (see the manual)
set -o nounset          # Disallow expansion of unset variables
#set -o errtrace        # Make sure any error trap is inherited (BASH only)
#set -o pipefail        # Use last non-zero exit code in a pipeline (BASH only)
#set -o xtrace          # Trace the execution of the script (UNCOMMENT TO DEBUG)

usage () {
    grep '^#/' < "$0" | cut -c4-
    exit 1
}

remove_all_containers () {
    docker stop "$(docker ps --all --quiet)"
    docker rm "$(docker ps --quiet)"
}

remove_all_networks () {
    docker network rm -f "$(docker network ls)"
}

remove_all_dangling_images () {
    docker rmi --force "$(docker images --filter "dangling=true")"
}

remove_all_volumes () {
    docker volume rm -f "$(docker volume ls)"
}

remove_all_images () {
    docker rmi -f "$(docker images)"
}

purge () {
    printf "Removing all containers ........ "
    null remove_all_containers || true
    printf "Done\n"

    printf "Removing all networks .......... "
    null remove_all_networks || true
    printf "Done\n"

    printf "Removing dangling images ....... "
    null remove_all_dangling_images || true
    printf "Done\n"

    printf "Removing all volumns ........... "
    null remove_all_volumes || true
    printf "Done\n"

    printf "Removing all images ............ "
    null remove_all_images || true
    printf "Done\n"
}

function confirmation_prompt () {
    while true; do
        echo -n "Do you want to clean/purge Docker data? y(es), n(o), or q(uit): "
        read -r yn
        case $yn in
            y) purge; break;;
            n) break;;
            q) exit;;        
            *) echo "Please answer y(es), n(o), or q(uit)";;
        esac
    done
}

case "${1:-''}" in
    -h|--help) usage;;
    -y|--yes) purge; exit;;
    *) confirmation_prompt;;
esac