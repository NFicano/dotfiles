#!/usr/bin/env bash
#/ network â€“ utility for gathering information about your local network.
#/
#/ Commands:
#/   -getlanhosts                discover all devices on your network.
#/   -getgatewayip               displays the address of your "network
#/                               gateway",
#/                               or the edge device (ie: router) that sits
#/                               between you and another network (ie: the
#/                               Internet).
#/   -gethostip                  displays your host ip address
#/   -getmodemip                 attempts to find the ip address of your modem
#/                               (first hop after your router/gateway).
#/   -getnetworkip               the common prefix of your private ip address,
#/                               used to refer to your subnet as a whole.
#/   -getprivateip               alias to "ip host"
#/   -getpublicip                the globally unique address assigned to your
#/                               network by your isp
#/   -getroutingtable            display your routing table.
#/   -getarptable                display your address resolution protocol
#/                               (arp) table.
#/   -getrouterip                alias to "ip gateway"
#/   -getispname                 displays the name of your isp
#/
#/   -probe <modem|router>       attempts to identify the operating system,
#/                               open ports, and running software on your modem
#/                               or router.
#/
#/   -exploitscan [target]       runs an advanced vulnerability scan against
#/                               your current subnet (or target ip if provided).
#/
#/   -osscan [target]            runs an *aggressive* operating system/version
#/                               detection scan against your current subnet (or
#/                               target ip if provided).
#/
#/   -snmpscan [target]          runs a simple network management protocol (snmp)
#/                               scan against your current subnet (or target ip if
#/                               provided).
#/   -portscan [target]          scan a target for open ports.
#/
#/   -webconfig <modem|router>   opens the web config for your modem or router.
#/
#/   -getsubnet [-o <bit|hex>]   displays your host subnet mask address ip.
#/
#/   -help                     displays help and usage.

set -o errexit          # Exit on most errors (see the manual)
set -o nounset          # Disallow expansion of unset variables
#set -o errtrace        # Make sure any error trap is inherited (BASH only)
#set -o pipefail        # Use last non-zero exit code in a pipeline (BASH only)
#set -o xtrace          # Trace the execution of the script (UNCOMMENT TO DEBUG)
export PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'

get_arp_table() {
  arp -al | awk '{printf "%-35s %-20s %-5s \n", $1, $2, $4}'
}

get_isp_name() {
  whois "$(get_public_ip_address)" |
    grep OrgName |
    awk '{$1="";print}' |
    xargs
}

get_public_ip_address() {
  curl -s "https://api.ipify.org/"
}

get_host_ip_address() {
  ifconfig |
    grep -E 'inet\s(192|172|10)' |
    awk '{print $2}'
}

get_routing_table() {
  netstat -nr -f inet
}

get_network_ip_address() {
  sipcalc "$(get_host_ip_address)" "$(get_network_mask_hex)" |
    grep "Network address" |
    awk '{print $4}'
}

get_network_mask() {
  sipcalc "$(get_host_ip_address)" "$(get_network_mask_hex)" |
    grep "Network mask" |
    awk '{print $4}' |
    grep -Eo '([0-9]{1,3}[.]){3}[0-9]{1,3}'
}

get_network_mask_bits() {
  sipcalc "$(get_host_ip_address)" "$(get_network_mask_hex)" |
    grep "Network mask (bits)" |
    awk '{print $5}'
}

get_network_mask_hex() {
  ifconfig |
    grep -E 'inet\s(192|172|10)' |
    awk '{print $4}'
}

get_gateway_ip_address() {
  netstat -rn |
    grep -E 'default\s+(192|172|10)' |
    awk '{print $2}'
}

lan_host_discovery() {
  sudo nmap "$(get_network_ip_address)/$(get_network_mask_bits)" -sP -oG - |
    grep Host |
    awk '{print $2 "\t" $3}' |
    sort
}

get_modem_ip_address() {
  sudo nmap \
    -sS 192.168.100.1 192.168.0.1 10.0.0.1 10.1.10.1 \
    --min-parallelism 100 |
    grep -Eo '([0-9]{1,3}[.]){3}[0-9]{1,3}'
}

open_router_config() {
  python -mwebbrowser "http://$(get_gateway_ip_address)"
}

open_modem_config() {
  python -mwebbrowser "http://$(get_modem_ip_address)"
}

probe_modem() {
  sudo nmap \
    --min-parallelism 100 \
    -A \
    -T4 "$(get_modem_ip_address)"
}

probe_router() {
  sudo nmap \
    --min-parallelism 100 \
    -A \
    -T4 "$(get_gateway_ip_address)"
}

exploit_scan() {
  if ! is_vulscan_installed || ! is_nmap_vulners_installed; then
    install_nmap_scripts
  fi
  sudo nmap \
    --script nmap-vulners,vulscan \
    --script-args vulscandb=scipvuldb.csv \
    -sV "$(get_target "$@")"
}

os_scan() {
  sudo nmap \
    --min-parallelism 100 \
    -A \
    -Pn \
    -T4 "$(get_target "$@")"
}

snmp_scan() {
  sudo nmap \
    --script snmp-brute,snmp-info \
    --script-args snmplist=community.lst \
    -sU -p161 \
    "$(get_target "$@")"
}

port_scan() {
  sudo nmap -p- "$(get_target "$@")"
}

get_target() {
  if [ $# -eq 0 ]; then
    echo "$(get_network_ip_address)/$(get_network_mask_bits)"
  else
    echo "$1"
  fi
}

show_usage() {
  echo "Usage: network [OPTION]..."
  echo "Try 'network --help' for more information."
}

show_unknown_command() {
  echo "ERROR: unknown command \"$1\""
  echo "Try 'network --help' for more information."
  exit 1
}

get_commands() {
  show_help | grep -o '\-[a-z]*'
  exit 0
}

get_nmap_script_path() {
  dirname "$(find /usr/local -type f -name '*.nse' -print | head -n 1)"
}

is_nmap_vulners_installed() {
  [[ -d "$(get_nmap_script_path)/nmap-vulners" ]]
}

is_vulscan_installed() {
  [[ -d "$(get_nmap_script_path)/vulscan" ]]
}

install_nmap_vulners() {
  cd "$(get_nmap_script_path)" || exit 1
  git clone https://github.com/vulnersCom/nmap-vulners.git
}

install_vulscan() {
  cd "$(get_nmap_script_path)" || exit 1
  git clone https://github.com/scipag/vulscan.git
}

update_vulscan() {
  cd "$(get_nmap_script_path)/vulscan/utilities/updater" || exit 1
  chmod +x "$(get_nmap_script_path)/vulscan/utilities/updater/updateFiles.sh"
  "$(get_nmap_script_path)/vulscan/utilities/updater/updateFiles.sh"
}

install_nmap_scripts() {
  install_nmap_vulners
  install_vulscan
  update_vulscan
}

show_help() {
  grep '^#/' < "$0" | cut -c4-
  exit 0
}

is_darwin() {
  [[ $(uname -s) == "Darwin" ]]
}

is_linux() {
  [[ $(uname -s) == "Linux" ]]
}

if [ ! -x "$(command -v nmap)" ] ||
   [ ! -x "$(command -v sipcalc)" ] ||
   [ ! -x "$(command -v egrep)" ]; then
  echo "Error: 'nmap', 'sipcalc', and 'egrep' must first be installed."
  is_darwin && echo "To fix, try running: brew install nmap sipcalc egrep"
  is_linux && echo "To fix, try running: apt-get install nmap sipcalc egrep"
  exit 1
fi

case "$@" in
  "-getgatewayip"          ) get_gateway_ip_address ;;
  "-gethostip"             ) get_host_ip_address ;;
  "-getispname"            ) get_isp_name ;;
  "-getlanhosts"           ) lan_host_discovery ;;
  "-getmodemip"            ) get_modem_ip_address ;;
  "-getnetworkip"          ) get_network_ip_address ;;
  "-getprivateip"          ) get_host_ip_address ;;
  "-getpublicip"           ) get_public_ip_address ;;
  "-getrouterip"           ) get_gateway_ip_address ;;
  "-getroutingtable"       ) get_routing_table ;;
  "-getarptable"           ) get_arp_table ;;
  "-getsubnet -o bits"     ) get_network_mask_bits ;;
  "-getsubnet -o hex"      ) get_network_mask_hex ;;
  "-getsubnet"             ) get_network_mask ;;
  "-probe modem"           ) probe_modem ;;
  "-probe router"          ) probe_router ;;
  "-exploitscan"*          ) shift; exploit_scan "$@" ;;
  "-osscan"*               ) shift; os_scan "$@" ;;
  "-snmpscan"*             ) shift; snmp_scan "$@" ;;
  "-portscan"*             ) shift; port_scan "$@" ;;
  "-updatevulscan"         ) update_vulscan ;;
  "-webconfig modem"       ) open_modem_config ;;
  "-webconfig router"      ) open_router_config ;;
  "listcommands"           ) get_commands ;;
  "--help"                 ) show_help ;;
  "-h"                     ) show_help ;;
  ""                       ) show_help ;;
  *                        ) show_unknown_command "$@" ;;
esac
exit 0
