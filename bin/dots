#!/usr/bin/env bash
# dots - utility for managing dotfiles
set -e
GITHUB_API_URL='https://api.github.com'
GITHUB_REPO='nficano/dotfiles'

silence () {
  "$@" 2> /dev/null > /dev/null;
}

log () {
  message="$1"; shift
  # shellcheck disable=SC2059
  printf "$message\n" "$@"
}

edit_bash_profile () {
  bash_profile="$(get_dotfiles_prefix)/bash_profile"
  open_file_with_preferred_editor "$bash_profile"
}

open_file_with_preferred_editor () {
  ${VISUAL:-${EDITOR:-vim}} $1
}

get_dotfiles_prefix () {
  fp="$(readlink -f ${0})"
  dir=$(dirname $fp)
  cd $dir || exit 1
  echo "$(git rev-parse --show-toplevel)"
}

show_usage () {
  log "Usage: dots [OPTION]..."
  log "Try 'dots --help' for more information."
}

show_unknown_command () {
  log "ERROR: unknown command \"$1\""
  log "Try 'dots --help' for more information."
}

get_repo_tags () {
  curl -s  "$GITHUB_API_URL/repos/$GITHUB_REPO/tags"
}

get_latest_version () {
  echo "$(get_repo_tags)" | jq -r '.[0].name'
}

get_path_checksum () {
  find "$1" -type f -exec md5sum {} \; | sort -k 2 | md5sum  | awk '{print $1}'
}

get_file_checksum () {
  md5sum "$1" | awk '{print $1}'
}

backup () {
  dotfiles_prefix="$(get_dotfiles_prefix)"
  build_prefix="$TMPDIR/.build"
  backup_prefix="$dotfiles_prefix/.versions/v$DOTFILES_VERSION"

  mkdir -p $backup_prefix
  mkdir -p $build_prefix

  cp -R $dotfiles_prefix/* $build_prefix/

  (
    cd $build_prefix;
    silence zip -ur "backup.zip" ./* -x "*.versions*" -x "*.git*"
  )

  mv "$build_prefix/backup.zip" "$backup_prefix/backup.zip"
  checksum="$(get_path_checksum "$build_prefix")"
  mv "$backup_prefix/backup.zip" "$backup_prefix/$checksum.zip"
  rm -rf $build_prefix
}

upgrade () {
  if is_update_available; then
    version="v$DOTFILES_VERSION"
    log "%s" "New version available!" \
      "installing nficano/dotfiles $(get_latest_version)..."
    backup
    cd "$(get_dotfiles_prefix)" || exit 1
    silence git fetch --all
    silence git reset --hard origin/master
    silence make install
    reload
    log "%s" "You're now up-to-date!" \
      "nficano/dotfiles has been updated from v$DOTFILES_VERSION to $version"
  else
    log "%s" "You're up-to-date!" \
      "nficano/dotfiles v$DOTFILES_VERSION is the newest version available."
  fi
}

is_update_available () {
  latest="$(get_latest_version)"
  version="v$DOTFILES_VERSION"
  if [ "$latest" = "$version" ]; then
    return 1
  else
    return 0
  fi
}

check_for_updates () {
  if ! is_update_available; then
    log "%s" "You're up-to-date!" \
      "nficano/dotfiles v$DOTFILES_VERSION is the newest version available."
  else
    log "%s" "New version available!" \
      "nficano/dotfiles $(get_latest_version) is ready to be version " \
      "(current v$DOTFILES_VERSION)."
  fi
}

show_help () {
cat <<EOF

dots â€“ utility for managing dotfiles

Commands:
  -help|-h            displays help and usage.
  -editprofile        opens bash_profile in your editor.
  -checkforupdates    checks if your dotfiles is the latest version.
  -upgrade            upgrades your dotfiles to latest version.
  -backup             makes a copy of your current dotfiles.
EOF
}

get_commands () {
  echo "$(show_help)" | grep -o '\-[a-z]*'
}

case "$@" in
  "--help"                 ) show_help; exit 0 ;;
  "-checkforupdates"       ) check_for_updates ;;
  "-editprofile"           ) edit_bash_profile ;;
  "-listcommands"          ) get_commands; exit 0 ;;
  "-upgrade"               ) upgrade ;;
  "-backup"                ) backup ;;
  "-h"                     ) show_help; exit 0 ;;
  ""                       ) show_usage; exit 0 ;;
  *                        ) show_unknown_command "$@"; exit 1 ;;
esac
exit 0
