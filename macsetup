#!/bin/bash
set -o errexit  # Exit on most errors (see the manual)
set -o errtrace # Make sure any error trap is inherited
set -o nounset  # Disallow expansion of unset variables
set -o pipefail # Use last non-zero exit code in a pipeline
#set -o xtrace          # Trace the execution of the script (debug)
export PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'

# shellcheck disable=SC2154
trap 'ret=$?; test $ret -ne 0 && printf "failed\n\n" >&2; exit $ret' EXIT

BREW_PREFIX="/usr/local"
BREW_INSTALLER="https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh"
run_setup() {
  SECONDS=0
  request_root_privileges
  setup_xcode
  setup_brew
  setup_duti
  setup_default_file_associations
  install_formulaes_from_brewfile
  quit_system_preferences
  setup_user_defaults
  hide_vendor_directories
  show_library_folder
  install_pyenv
  install_pipx
  restart_all_apps
  
  # shellcheck disable=SC2039
  echo "âœ¨  Done in $((SECONDS))s."
  exit 0
}

log() {
  message="$1"
  shift
  # shellcheck disable=SC2059
  printf "$message\n" "$@"
}

get_dotfiles_path() {
  fp=$(readlink -f "${0}")
  dir=$(dirname "$fp")
  cd "$dir" || exit 1
  git rev-parse --show-toplevel
}

get_brewfile_path() {
  echo "$(get_dotfiles_path)/Brewfile"
}

is_duti_installed() {
  if command -v duti >/dev/null; then
    return 0
  else
    return 1
  fi
}

install_duti() {
  brew install duti
}

setup_duti() {
  if ! is_duti_installed; then
    log "Installing Duti ..."
    install_duti
  else
    log "Duti is already installed. Skipping ..."
  fi
}

install_formulaes_from_brewfile() {
  brew update --force
  brew bundle --file="$(get_brewfile_path)"
}

is_xcode_command_line_tools_installed() {
  if xcode-select -p >/dev/null; then
    return 0
  else
    return 1
  fi
}

install_xcode_command_line_tools() {
  xcode-select --install >/dev/null
  until xcode-select -p >/dev/null; do
    sleep 5
  done
}

is_xcode_eula_accepted() {
  if sudo xcodebuild -license status; then
    return 0
  else
    return 1
  fi
}

accept_xcode_eula() {
  sudo xcodebuild -license accept
}

setup_xcode() {
  if ! is_xcode_command_line_tools_installed; then
    log "Installing Xcode Command Line Tools ..."
    install_xcode_command_line_tools
  else
    log "XCode is already installed. Skipping ..."
  fi

  if ! is_xcode_eula_accepted; then
    log "Accepting EULA ..."
    accept_xcode_eula
  else
    log "XCode EULA Already Accepted. Skipping ..."
  fi
}

is_brew_installed() {
  if command -v brew >/dev/null; then
    return 0
  else
    return 1
  fi
}

install_brew() {
  curl -fsSL "$BREW_INSTALLER" | bash
  export PATH="/opt/homebrew/bin:$PATH"
}

install_pyenv() {
  # shellcheck disable=SC2317
  curl -fsS "https://pyenv.run" | bash
}

install_pipx() {
  # shellcheck disable=SC2317
  brew install pipx
  pipx ensurepath
  sudo pipx --global ensurepath
  pipx completions
}

setup_brew() {
  if [ -d "$BREW_PREFIX" ]; then
    if ! [ -r "$BREW_PREFIX" ]; then
      sudo chown -R "$LOGNAME:admin" "$BREW_PREFIX"
    fi
  else
    sudo mkdir "$BREW_PREFIX"
    sudo chflags norestricted "$BREW_PREFIX"
    sudo chown -R "$LOGNAME:admin" "$BREW_PREFIX"
  fi
  if ! is_brew_installed; then
    log "Installing Homebrew ..."
    install_brew
  else
    log "Homebrew Already Installed. Skipping ..."
  fi
}

request_root_privileges() {
  log "Requesting root privileges ..."
  sudo -v
  while true; do
    sudo -n true
    sleep 60
    kill -0 "$$" || exit
  done 2>/dev/null &
}

setup_default_file_associations() {
  log "Setting preferred default file associations ..."
  duti -s com.microsoft.Excel .csv all

  duti -s com.microsoft.VSCode .c all
  duti -s com.microsoft.VSCode .cpp all
  duti -s com.microsoft.VSCode .cs all
  duti -s com.microsoft.VSCode .css all
  duti -s com.microsoft.VSCode .go all
  duti -s com.microsoft.VSCode .java all
  duti -s com.microsoft.VSCode .js all
  duti -s com.microsoft.VSCode .sass all
  duti -s com.microsoft.VSCode .scss all
  duti -s com.microsoft.VSCode .less all
  duti -s com.microsoft.VSCode .vue all
  duti -s com.microsoft.VSCode .cfg all
  duti -s com.microsoft.VSCode .json all
  duti -s com.microsoft.VSCode .jsx all
  duti -s com.microsoft.VSCode .lua all
  duti -s com.microsoft.VSCode .md all
  duti -s com.microsoft.VSCode .php all
  duti -s com.microsoft.VSCode .pl all
  duti -s com.microsoft.VSCode .py all
  duti -s com.microsoft.VSCode .rb all
  duti -s com.microsoft.VSCode .rs all
  duti -s com.microsoft.VSCode .sh all
  duti -s com.microsoft.VSCode .swift all
  duti -s com.microsoft.VSCode .txt all
  duti -s com.microsoft.VSCode .conf all
  duti -s com.microsoft.VSCode .yaml all
  duti -s com.microsoft.VSCode .yml all
  duti -s com.microsoft.VSCode .toml all
  duti -s com.microsoft.VSCode .jsonl all
  duti -s com.microsoft.VSCode .plist all
  duti -s com.microsoft.VSCode .scpt all
  duti -s com.microsoft.VSCode Makefile all

  duti -s com.microsoft.VSCode public.json all
  duti -s com.microsoft.VSCode public.plain-text all
  duti -s com.microsoft.VSCode public.python-script all
  duti -s com.microsoft.VSCode public.shell-script all
  duti -s com.microsoft.VSCode public.source-code all
  duti -s com.microsoft.VSCode public.text all
  duti -s com.microsoft.VSCode public.unix-executable all

  duti -s com.apple.QuickTimePlayerX .avi all
  duti -s com.apple.QuickTimePlayerX .drc all
  duti -s com.apple.QuickTimePlayerX .flv all
  duti -s com.apple.QuickTimePlayerX .m4v all
  duti -s com.apple.QuickTimePlayerX .mkv all
  duti -s com.apple.QuickTimePlayerX .mov all
  duti -s com.apple.QuickTimePlayerX .m4a all
  duti -s com.apple.QuickTimePlayerX .mp2 all
  duti -s com.apple.QuickTimePlayerX .mp3 all
  duti -s com.apple.QuickTimePlayerX .mpe all
  duti -s com.apple.QuickTimePlayerX .mpeg all
  duti -s com.apple.QuickTimePlayerX .mpg all
  duti -s com.apple.QuickTimePlayerX .mpv all
  duti -s com.apple.QuickTimePlayerX .rm all
  duti -s com.apple.QuickTimePlayerX .rmvb all
  duti -s com.apple.QuickTimePlayerX .vob all
  duti -s com.apple.QuickTimePlayerX .wmv all
}

set_wallpaper() {
  log "Setting wallpaper ..."
#   osascript -e "
# tell application \"System Events\" 
#     tell every desktop
#         set picture to \"$HOME/github/dotfiles/os/darwin/wallpaper/The Cliffs.heic\"
#     end tell
# end tell"
}

quit_system_preferences() {
  log "Quitting System Preferences ..."
  osascript -e 'tell application "System Preferences" to quit'
}

disable_keypress_itunes() {
  # Prevent the keyboard media controls from opening iTunes
  launchctl unload -w /System/Library/LaunchAgents/com.apple.rcd.plist 2>/dev/null
}

setup_user_defaults() {
  log "Setting up user defaults ..."
  defaults write com.apple.SoftwareUpdate ScheduleFrequency -int 1

  # Always show expanded save panel
  defaults write NSGlobalDomain NSNavPanelExpandedStateForSaveMode -bool true
  defaults write NSGlobalDomain NSNavPanelExpandedStateForSaveMode2 -bool true

  # Always show expanded print panel
  defaults write NSGlobalDomain PMPrintingExpandedStateForPrint -bool true
  defaults write NSGlobalDomain PMPrintingExpandedStateForPrint2 -bool true

  # Automatically quit printer app once all jobs complete
  defaults write com.apple.print.PrintingPrefs "Quit When Finished" -bool true

  # Disable the "Are you sure you want to open this application?" dialog
  defaults write com.apple.LaunchServices LSQuarantine -bool false

  # Increase the Bluetooth sound quality
  defaults write com.apple.BluetoothAudioAgent "Apple Bitpool Min (editable)" -int 40

  # Disable the shadows in screenshots
  defaults write com.apple.screencapture disable-shadow -bool true

  # Keep folders on top when sorting by name
  defaults write com.apple.finder _FXSortFoldersFirst -bool true

  # Disable the file extension change warning
  defaults write com.apple.finder FXEnableExtensionChangeWarning -bool false

  # Use the list view in all Finder windows by default
  defaults write com.apple.finder FXPreferredViewStyle -string "Nlsv"

  # Expand the "General", "Open with", and "Sharing & Permissions" in File Info
  defaults write com.apple.finder FXInfoPanesExpanded -dict \
    General -bool true \
    OpenWith -bool true \
    Privileges -bool true

  # Minimize windows into their application icon
  defaults write com.apple.dock minimize-to-application -bool true

  # Disable show recent applications in Dock
  defaults write com.apple.dock show-recents -bool false

  # Start TextEdit in plain-text mode
  defaults write com.apple.TextEdit RichText -int 0

  # Launch Activity Monitor to main window
  defaults write com.apple.ActivityMonitor OpenMainWindow -bool true

  # Visualize CPU usage in Activity Monitor Dock icon
  defaults write com.apple.ActivityMonitor IconType -int 5

  # Show all processes in Activity Monitor
  defaults write com.apple.ActivityMonitor ShowCategory -int 0

  # Sort Activity Monitor results by CPU usage
  defaults write com.apple.ActivityMonitor SortColumn -string "CPUUsage"
  defaults write com.apple.ActivityMonitor SortDirection -int 0

  # Set default dock size to 45 pixels
  defaults write com.apple.dock "tilesize" -int "45" && killall Dock

  # Enable AirDrop over Ethernet
  defaults write com.apple.NetworkBrowser BrowseAllInterfaces -bool true
}

hide_vendor_directories() {
  log "Hiding unused directories ..."
  # Show ~/Library folder
  chflags nohidden "$(realpath ~/Library)"

  # Hide unused app directories
  chflags hidden "$HOME/Music"
  chflags hidden "$HOME/Movies"
  chflags hidden "$HOME/Pictures"
  chflags hidden "$HOME/Public"
}

show_library_folder() {
  chflags nohidden "$(realpath "$HOME/Library")"
}

restart_all_apps() {
  log "Restarting affected apps ..."
  for app in "Activity Monitor" \
    "Address Book" \
    "Calendar" \
    "cfprefsd" \
    "Contacts" \
    "Dock" \
    "Finder" \
    "Google Chrome Canary" \
    "Google Chrome" \
    "Safari" \
    "Spectacle" \
    "SystemUIServer"; do
    killall "${app}" &>/dev/null
  done
}

run_setup
